<!doctype html>
<html lang="es">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Prompts Vivos (TERC/MSDA + ISM) — Online</title>
<link rel="stylesheet" href="style.css">
</head>
<body>
<header>
  <h1>Prompts Vivos (TERC/MSDA + ISM) — Online</h1>
  <div class="muted">Dato → narrativa → imagen → retroalimentación (100% en el navegador)</div>
</header>
<main>
  <section class="panel">
    <div class="grid">
      <label for="csvFile" class="btn">Cargar CSV local</label>
      <input type="file" id="csvFile" accept=".csv" style="display:none">
      <input id="csvUrl" class="input" placeholder="o pega la URL de un CSV público (Google Sheets publicado como CSV)">
      <button id="fetchBtn" class="btn secondary">Cargar desde URL</button>
      <button id="demoBtn" class="btn secondary">Cargar demo (5 casos)</button>
      <span id="status" class="muted"></span>
    </div>
  </section>
  <section class="panel">
    <div class="grid">
      <button id="downloadMD" class="btn">Descargar Markdown</button>
      <button id="downloadJSONL" class="btn">Descargar JSONL</button>
      <input id="search" class="input" placeholder="Buscar proyecto…">
    </div>
  </section>
  <section id="cards" class="cards"></section>
</main>
<script>
const REQ_COLS = ["Proyecto","IPC","IAE","IIM","IEB","IAB","ICE","Equidad","Diversidad","Resonancia"];
let patrones = null, plantilla = null, prompts = [];

function qs(id){return document.getElementById(id)}
function setStatus(t){qs("status").textContent = t || ""}

async function loadJSON(path){
  const r = await fetch(path);
  if(!r.ok) throw new Error("No puedo leer "+path);
  return await r.json();
}
function parseCSV(text){
  const lines = text.trim().split(/\r?\n/);
  const headers = lines[0].split(",").map(s=>s.trim());
  return lines.slice(1).filter(Boolean).map(l=>{
    const cells = l.split(",").map(s=>s.trim());
    const o = {}; headers.forEach((h,i)=>o[h]=cells[i]??""); return o;
  });
}
function nivel(x){x=+x; if(x>=80)return"Alto"; if(x>=60)return"Medio"; if(x>=40)return"Bajo"; return "Muy Bajo"}
function bucket(valor, rangos){
  for(const k of ["alto","medio","bajo","muy_bajo"]){
    const r=rangos[k]; if(valor>=r.min && valor<r.max) return k;
  } return "muy_bajo";
}
function pick(dic, indice, b){
  try{ return dic[indice][b][0] }catch(e){ return "" }
}
function miniMarked(md){
  let html = md.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");
  html = html.replace(/^### (.*)$/gm,"<h3>$1</h3>");
  html = html.replace(/\*\*(.+?)\*\*/g,"<strong>$1</strong>");
  html = html.replace(/\n/g,"<br>"); return html;
}
function buildRecords(rows){
  const rangos = patrones.rangos, msdaDic=patrones.msda, ismDic=patrones.ism;
  const bloques = plantilla.bloques, estructura = plantilla.estructura_md;
  const out = [];
  for(const row of rows){
    const IPC=+row.IPC, IAE=+row.IAE, IIM=+row.IIM, IEB=+row.IEB, IAB=+row.IAB, ICE=+row.ICE;
    const EQ=+row.Equidad, DV=+row.Diversidad, RS=+row.Resonancia;
    const msda_prom = +(((IPC+IAE+IIM+IEB+IAB+ICE)/6).toFixed(2));
    const ism_prom  = +(((EQ+DV+RS)/3).toFixed(2));
    const msda_nivel = nivel(msda_prom), ism_nivel=nivel(ism_prom);
    const b_ipc=bucket(IPC,rangos), b_iae=bucket(IAE,rangos), b_iim=bucket(IIM,rangos);
    const b_ieb=bucket(IEB,rangos), b_iab=bucket(IAB,rangos), b_ice=bucket(ICE,rangos);
    const b_eq=bucket(EQ,rangos),   b_dv=bucket(DV,rangos),   b_rs=bucket(RS,rangos);
    const msda_frases = { IPC: pick(msdaDic,"IPC",b_ipc), IAE: pick(msdaDic,"IAE",b_iae),
                          IIM: pick(msdaDic,"IIM",b_iim), IEB: pick(msdaDic,"IEB",b_ieb),
                          IAB: pick(msdaDic,"IAB",b_iab), ICE: pick(msdaDic,"ICE",b_ice) };
    const ism_frases = { Equidad: pick(ismDic,"Equidad",b_eq), Diversidad: pick(ismDic,"Diversidad",b_dv), Resonancia: pick(ismDic,"Resonancia",b_rs) };
    const ctx = { Proyecto: row.Proyecto, IPC, IAE, IIM, IEB, IAB, ICE, Equidad: EQ, Diversidad: DV, Resonancia: RS,
                  msda_prom, msda_nivel, ism_prom, ism_nivel, msda_frases, ism_frases };
    function renderBlock(tpl){
      let out = tpl;
      for(const [fam,dic] of [["msda_frases",msda_frases],["ism_frases",ism_frases]]){
        for(const k in dic){ out = out.replace(new RegExp("\\{"+fam+"\\."+k+"\\}","g"), String(dic[k])) }
      }
      for(const k in ctx){ out = out.replace(new RegExp("\\{"+k+"\\}","g"), String(ctx[k])) }
      return out;
    }
    const partes = estructura.map(key=>renderBlock(bloques[key]));
    const prompt_md = partes.join("\n\n").trim();
    out.push({ proyecto: row.Proyecto,
      msda: {IPC,IAE,IIM,IEB,IAB,ICE,promedio:msda_prom,nivel:msda_nivel},
      ism:  {Equidad:EQ,Diversidad:DV,Resonancia:RS,promedio:ism_prom,nivel:ism_nivel},
      prompt_md,
      prompt_img: `Render simbiótico de ${row.Proyecto} con MSDA ${msda_nivel} e ISM ${ism_nivel}; mejorar ICE/IAB y ampliar Equidad/Diversidad evitando clichés.`
    });
  } return out;
}
function renderCards(arr){
  const cont = qs("cards"); cont.innerHTML = "";
  arr.forEach((o)=>{
    const art = document.createElement("article"); art.className = "card";
    art.innerHTML = `<h3>${o.proyecto}</h3><div class="md">${miniMarked(o.prompt_md)}</div>`;
    cont.appendChild(art);
  });
}
function toJSONL(arr){ return arr.map(o=>JSON.stringify(o)).join("\n") }
function toMarkdown(arr){ return arr.map(o=>`# ${o.proyecto}\n\n${o.prompt_md}`).join("\n\n---\n\n") }
function download(name, content, type="text/plain;charset=utf-8"){
  const blob = new Blob([content], {type}); const a = document.createElement("a");
  a.href = URL.createObjectURL(blob); a.download = name; a.click(); URL.revokeObjectURL(a.href);
}
// Boot
(async function(){
  try{
    patrones = await loadJSON("patrones_semanticos.json");
    plantilla = await loadJSON("plantilla_semantica_v1.json");
    const urlParams = new URLSearchParams(location.search);
    const csvParam = urlParams.get("csv");
    if(csvParam){ setStatus("Cargando CSV desde URL…"); const r = await fetch(csvParam);
      const text = await r.text(); const rows = parseCSV(text);
      prompts = buildRecords(rows); renderCards(prompts); setStatus(`Cargados ${prompts.length} proyectos (URL).`);
    }
  }catch(e){ setStatus("Error cargando plantillas: " + e.message); }
})();
// UI
qs("csvFile").addEventListener("change",(ev)=>{
  const file = ev.target.files[0]; if(!file) return; setStatus("Leyendo CSV local…");
  const fr = new FileReader(); fr.onload = (e)=>{
    const rows = parseCSV(e.target.result); prompts = buildRecords(rows);
    renderCards(prompts); setStatus(`Cargados ${prompts.length} proyectos (archivo).`);
  }; fr.readAsText(file, "utf-8");
});
qs("fetchBtn").addEventListener("click", async ()=>{
  const url = qs("csvUrl").value.trim(); if(!url) return;
  try{ setStatus("Descargando CSV…"); const r = await fetch(url); const text = await r.text();
       const rows = parseCSV(text); prompts = buildRecords(rows);
       renderCards(prompts); setStatus(`Cargados ${prompts.length} proyectos (URL).`);
  }catch(e){ setStatus("No pude cargar ese CSV: " + e.message); }
});
qs("demoBtn").addEventListener("click", ()=>{
  const demo = `Proyecto,IPC,IAE,IIM,IEB,IAB,ICE,Equidad,Diversidad,Resonancia
Orquideorama,79,78,85,68,73,70,85,85,85
Aula Ambiental UNAL,77.5,68.75,72.5,70,68.33,61.67,55,70,62
FLOW Centro Felicidad,79,78,85,68,73,70,68,72,73
Velatorio Sucre,63.75,60,76.25,55,48.33,43.33,35,55,20
Tienda Chocolates,81.25,65,82.5,56.67,35,35,41,22,63`;
  const rows = parseCSV(demo); prompts = buildRecords(rows);
  renderCards(prompts); setStatus(`Demo cargada: ${prompts.length} proyectos.`);
});
qs("downloadMD").addEventListener("click", ()=> download("prompts.md", toMarkdown(prompts), "text/markdown;charset=utf-8"));
qs("downloadJSONL").addEventListener("click", ()=> download("prompts.jsonl", toJSONL(prompts), "application/json;charset=utf-8"));
qs("search").addEventListener("input", (ev)=>{
  const q = ev.target.value.toLowerCase();
  const f = prompts.filter(p=>p.proyecto.toLowerCase().includes(q));
  renderCards(f);
});
</script>
</body>
</html>
